#include <bits/stdc++.h>

using namespace std;
#define int long long
#define INF (int)1e18
#define endl '\n'
const int mod = 1000 * 1000 * 1000 + 7;
const int N = 100005;
#define f first
#define s second

mt19937_64 RNG(chrono::steady_clock::now().time_since_epoch().count());
vector<pair<int,int> > adj[105][105];

int dx[] = {1, 0, -1, 0, 3, 0, -3, 0, 2, 2, 1, 1, -1, -1, -2, -2};
int dy[] = {0, 1, 0, -1, 0, 3, 0, -3, 1, -1, 2, -2, 2, -2, 1, -1};

void Solve() {
    int n , t; cin>>n>>t;
    vector<vector<int> > a(n+1, vector<int> (n+1));
    for(int i = 1 ; i<= n ; i++){
        for(int j = 1 ; j<= n ; j++){
            cin>>a[i][j];
        }
    }
    for(int i = 1 ; i<= n ; i++){
        for(int j = 1 ;j<= n ; j++){
            for (int k = 0; k < 16; ++k) {
                if (i+dx[k]<1 || i+dx[k]>n ||j+dy[k]<1 ||j+dy[k]> n){
                    continue;
                }
                adj[i][j].push_back({i+dx[k],j+dy[k]});
                adj[i+dx[k]][j+dy[k]].push_back({i,j});
            }
        }
    }
   
    vector<vector<int>> time(n+1,vector<int> (n+1,1e18));
    
    priority_queue<tuple<int,int,int> , vector<tuple<int,int,int>> , greater<>> q;
    q.push({0,1,1});
    time[1][1] = 0;
    while (!q.empty()){
        tuple<int,int,int> v = q.top();
        q.pop();
        int temp = get<0>(v);
        int x = get<1>(v);
        int y = get<2> (v);
        for(auto u : adj[x][y]){
            if (time[u.first][u.second]>temp+a[u.first][u.second] +(t*3)){
                time[u.first][u.second] = temp + a[u.first][u.second] + (t*3);
                q.push({time[u.first][u.second] , u.first , u.second});
            }
        }
        int man = (n-x) + (n-y);
        if (man<3){
            time[n][n] = min(time[n][n] , time[x][y]+(t*man));
        }
    }
    cout<<time[n][n]<<endl;

}

int32_t main() {
    auto begin = std::chrono::high_resolution_clock::now();
    ios_base::sync_with_stdio(false);
    cin.tie(0);

#ifndef ONLINE_JUDGE
    freopen("visitfj.in", "r", stdin);
    freopen("visitfj.out", "w", stdout);
#endif


//#ifndef ONLINE_JUDGE
//    freopen("in.txt", "r", stdin);
//    freopen("out.txt", "w", stdout);
//#endif

    int t = 1;
    //   cin >> t;
    for (int i = 1; i <= t; i++) {
        //cout << "Case #" << i << ": ";
        Solve();
    }
    auto end = std::chrono::high_resolution_clock::now();
    auto elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);
    cerr << "Time measured: " << elapsed.count() * 1e-9 << " seconds.\n";
    return 0;
}
